version: "3"
x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.1.2}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ../airflow/dags:/opt/airflow/dags
    - ../airflow/logs:/opt/airflow/logs
    - ../airflow/plugins:/opt/airflow/plugins
    - ../airflow/spark_apps:/opt/airflow/spark_apps
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  kafka:
    image: wurstmeister/kafka:0.10.0.1-2
    networks:
      - streaming-data-internal
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
    depends_on:
      - zookeeper

  hadoop:
    image: sequenceiq/hadoop-docker:2.7.0
    command: "/etc/bootstrap.sh -d"
    networks:
      - streaming-data-internal
    ports:
      - "50070:50070"
      - "50075:50075"
      - "8088:8088"
      - "8042:8042"
      - "9000:9000"
      - "50010:50010"

  hadoop-seed:
    build:
      context: ../hdfs
    networks:
      - streaming-data-internal
    depends_on:
      - hadoop
    restart: on-failure

  zookeeper:
    image: zookeeper:3.3.6
    networks:
      - streaming-data-internal
    ports:
      - "2181:2181"

  zookeeper-seed:
    build:
      context: ../zookeeper
    networks:
      - streaming-data-internal
    depends_on:
      - zookeeper

#  station-information-producer:
#    build:
#      context: ../CitibikeApiProducer
#      dockerfile: Dockerfile-station-information
#    depends_on:
#      - kafka
#      - zookeeper-seed
#    networks:
#      - streaming-data-internal

#  station-status-producer:
#    build:
#      context: ../CitibikeApiProducer
#      dockerfile: Dockerfile-station-status
#    depends_on:
#      - kafka
#      - zookeeper-seed
#    networks:
#      - streaming-data-internal

#  station-san-francisco-producer:
#    build:
#      context: ../CitibikeApiProducer
#      dockerfile: Dockerfile-station-san-francisco
#    depends_on:
#      - kafka
#      - zookeeper-seed
#    networks:
#      - streaming-data-internal

  station-marseille-producer:
    build:
      context: ../CitibikeApiProducer
      dockerfile: Dockerfile-station-marseille
    depends_on:
      - kafka
      - zookeeper-seed
    networks:
      - streaming-data-internal

#  raw-station-information-data-saver:
#    build:
#      context: ../RawDataSaver
#      dockerfile: Dockerfile-station-information
#    depends_on:
#      - kafka
#      - station-information-producer
#      - station-status-producer
#      - station-san-francisco-producer
#      - station-marseille-producer
#      - hadoop-seed
#      - zookeeper-seed
#    volumes:
#      - ~/.ivy2:/root/.ivy2:rw
#    networks:
#      - streaming-data-internal
#    restart: on-failure

#  raw-station-status-data-saver:
#    build:
#      context: ../RawDataSaver
#      dockerfile: Dockerfile-station-status
#    depends_on:
#      - kafka
#      - station-information-producer
#      - station-status-producer
#      - station-san-francisco-producer
#      - station-marseille-producer
#      - hadoop-seed
#      - zookeeper-seed
#    volumes:
#      - ~/.ivy2:/root/.ivy2:rw
#    networks:
#      - streaming-data-internal
#    restart: on-failure

#  raw-station-data-san-francisco-saver:
#    build:
#      context: ../RawDataSaver
#      dockerfile: Dockerfile-station-data-SF
#    depends_on:
#      - kafka
#      - station-information-producer
#      - station-status-producer
#      - station-san-francisco-producer
#      - station-marseille-producer
#      - hadoop-seed
#      - zookeeper-seed
#    volumes:
#      - ~/.ivy2:/root/.ivy2:rw
#    networks:
#      - streaming-data-internal
#    restart: on-failure

  raw-station-data-marseille-saver:
    build:
      context: ../RawDataSaver
      dockerfile: Dockerfile-station-data-Mars
    depends_on:
      - kafka
      - station-information-producer
      - station-status-producer
      - station-san-francisco-producer
      - station-marseille-producer
      - hadoop-seed
      - zookeeper-seed
    volumes:
      - ~/.ivy2:/root/.ivy2:rw
    networks:
      - streaming-data-internal
    restart: on-failure

#  station-consumer:
#    build:
#      context: ../StationConsumer
#    depends_on:
#      - zookeeper-seed
#      - kafka
#      - station-status-producer
#      - station-san-francisco-producer
#      - station-marseille-producer
#      - raw-station-status-data-saver
#    volumes:
#      - ~/.ivy2:/root/.ivy2:rw
#    command: [ "./wait-for.sh", "zookeeper:2181", "-t", "30" ]
#    networks:
#      - streaming-data-internal
#    restart: on-failure

#  station-transformer-nyc:
#    build:
#      context: ../StationTransformerNYC
#    depends_on:
#      - zookeeper-seed
#      - hadoop-seed
#      - kafka
#      - station-status-producer
#      - station-information-producer
#    volumes:
#      - ~/.ivy2:/root/.ivy2:rw
#    command: [ "./wait-for.sh", "zookeeper:2181", "-t", "30" ]
#    networks:
#      - streaming-data-internal
#    restart: on-failure

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 5s
      retries: 5
    restart: always

  redis:
    image: redis:latest
    ports:
      - 6379:6379
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: >
      pip install apache-airflow-providers-apache-spark
      webserver
    ports:
      - 8080:8080
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 20s
      timeout: 20s
      retries: 10
    restart: always


  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"' ]
      interval: 20s
      timeout: 20s
      retries: 5
    restart: always

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 20s
      timeout: 20s
      retries: 5
    restart: always

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:5555/" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

networks:
  streaming-data-internal:

volumes:
  postgres-db-volume: